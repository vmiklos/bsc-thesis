.PS
copy "sequence.pic";

actor(Actor);
pobject(Center);
pobject(Sensor);
pobject(Terminal);
pobject(Center2);
pobject(Sensor2);
pobject(Terminal2);
step();

cmessage(Actor,Center,"c:Center");
active(Center);
step();

cmessage(Actor,Center2,"c2:Center");
active(Center2);
step();

cmessage(Actor,Sensor,"s:Sensor");
active(Sensor);
step();

message(Sensor,Center,"register()");
step();

message(Sensor,Center2,"register()");
step();

cmessage(Actor,Sensor2,"s2:Sensor");
active(Sensor2);
step();

message(Sensor2,Center,"register()");
step();

message(Sensor2,Center2,"register()");
step();

cmessage(Actor,Terminal,"t:Terminal");
active(Terminal);
step();

message(Terminal,Center,"subscribe()");
step();

message(Terminal,Center2,"subscribe()");
step();

cmessage(Actor,Terminal2,"t2:Terminal");
active(Terminal2);
step();

message(Terminal2,Center,"subscribe()");
step();

message(Terminal2,Center2,"subscribe()");
step();

message(Sensor,Center,"notify()");
step();

message(Center,Terminal,"notify()");
step();

message(Center,Terminal2,"notify()");
step();

message(Sensor,Center2,"notify()");
step();

message(Center2,Terminal,"notify()");
step();

message(Center2,Terminal2,"notify()");
step();

inactive(Terminal);
step();

inactive(Terminal2);
step();

inactive(Sensor);
step();

inactive(Sensor2);
step();

inactive(Center);
step();

inactive(Center2);
step();
.PE

# vim: ft=pic
